#!/bin/bash

# Project Configuration Management System
# This script manages project configuration data for the template

CONFIG_FILE=".project-config"

# Function to create project configuration
create_project_config() {
    local solution_name="$1"
    local namespace_name="$2"
    local display_name="$3"
    local postgres_port="$4"
    local redis_port="$5"
    local smtp_web_port="$6"
    local smtp_port="$7"
    
    cat > "$CONFIG_FILE" <<EOF
# Project Configuration
# Generated by init.sh on $(date)
# DO NOT EDIT MANUALLY - Use scripts/init.sh to update

SOLUTION_NAME="$solution_name"
NAMESPACE_NAME="$namespace_name"
DISPLAY_NAME="$display_name"

# Generated Ports
POSTGRES_PORT="$postgres_port"
REDIS_PORT="$redis_port"
SMTP_WEB_PORT="$smtp_web_port"
SMTP_PORT="$smtp_port"

# Status
PROJECT_INITIALIZED=true
INIT_DATE="$(date)"
EOF
    
    echo "‚úÖ Created project configuration: $CONFIG_FILE"
}

# Function to load project configuration
load_project_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        return 0
    else
        return 1
    fi
}

# Function to detect project configuration from existing files
detect_project_config() {
    local detected_solution=""
    local detected_namespace=""
    local detected_display=""
    
    # Try to detect from solution file
    if [[ -d "backend" ]]; then
        local sln_file=$(find backend -name "*.sln" -type f | head -1)
        if [[ -n "$sln_file" ]]; then
            detected_solution=$(basename "$sln_file" .sln)
        fi
    fi
    
    # Try to detect from .env files
    if [[ -f ".env.development" ]]; then
        detected_display=$(grep -E "(VITE_APP_NAME|EMAIL_FROM_NAME)" .env.development | head -1 | cut -d'=' -f2 | tr -d '"' | sed 's/ Dev$//')
    fi
    
    # Try to detect namespace from C# files
    if [[ -d "backend" ]]; then
        detected_namespace=$(grep -r "^namespace " backend/ --include="*.cs" | head -1 | sed 's/.*namespace \([^;]*\).*/\1/' | tr -d ' ')
    fi
    
    # Set defaults if not detected
    detected_solution=${detected_solution:-"intranet_starter"}
    detected_namespace=${detected_namespace:-"IntranetStarter"}
    detected_display=${detected_display:-"Intranet Starter"}
    
    # Detect ports from environment files
    local postgres_port=$(grep "POSTGRES_HOST_PORT" .env.development 2>/dev/null | cut -d'=' -f2 || echo "5433")
    local redis_port=$(grep "REDIS_HOST_PORT" .env.development 2>/dev/null | cut -d'=' -f2 || echo "6380")
    local smtp_web_port=$(grep "SMTP_HOST_PORT" .env.development 2>/dev/null | cut -d'=' -f2 || echo "5001")
    local smtp_port=$(grep "^SMTP_PORT" .env.development 2>/dev/null | cut -d'=' -f2 | head -1 || echo "25")
    
    # Export detected values
    SOLUTION_NAME="$detected_solution"
    NAMESPACE_NAME="$detected_namespace"
    DISPLAY_NAME="$detected_display"
    POSTGRES_PORT="$postgres_port"
    REDIS_PORT="$redis_port"
    SMTP_WEB_PORT="$smtp_web_port"
    SMTP_PORT="$smtp_port"
    PROJECT_INITIALIZED=false
    
    echo "üîç Auto-detected project configuration:"
    echo "  Solution: $SOLUTION_NAME"
    echo "  Namespace: $NAMESPACE_NAME"
    echo "  Display: $DISPLAY_NAME"
}

# Function to check if project is initialized
is_project_initialized() {
    if [[ -f "$CONFIG_FILE" ]]; then
        load_project_config
        [[ "$PROJECT_INITIALIZED" == "true" ]] && return 0
    fi
    return 1
}

# Function to show project configuration
show_project_config() {
    if load_project_config; then
        echo "üìã Current Project Configuration:"
        echo "  Solution Name: $SOLUTION_NAME"
        echo "  C# Namespace: $NAMESPACE_NAME"
        echo "  Display Name: $DISPLAY_NAME"
        echo ""
        echo "  Service Ports:"
        echo "    PostgreSQL: $POSTGRES_PORT"
        echo "    Redis: $REDIS_PORT"
        echo "    SMTP Web UI: $SMTP_WEB_PORT"
        echo "    SMTP Server: $SMTP_PORT"
        echo ""
        echo "  Initialized: $PROJECT_INITIALIZED"
        if [[ -n "$INIT_DATE" ]]; then
            echo "  Date: $INIT_DATE"
        fi
    else
        echo "‚ùå No project configuration found"
        echo "   Run 'scripts/init.sh' to initialize the project"
        return 1
    fi
}

# Function to update ports in configuration
update_ports() {
    local postgres_port="$1"
    local redis_port="$2"
    local smtp_web_port="$3"
    local smtp_port="$4"
    
    if [[ -f "$CONFIG_FILE" ]]; then
        sed -i "s/POSTGRES_PORT=\"[0-9]*\"/POSTGRES_PORT=\"$postgres_port\"/" "$CONFIG_FILE"
        sed -i "s/REDIS_PORT=\"[0-9]*\"/REDIS_PORT=\"$redis_port\"/" "$CONFIG_FILE"
        sed -i "s/SMTP_WEB_PORT=\"[0-9]*\"/SMTP_WEB_PORT=\"$smtp_web_port\"/" "$CONFIG_FILE"
        sed -i "s/SMTP_PORT=\"[0-9]*\"/SMTP_PORT=\"$smtp_port\"/" "$CONFIG_FILE"
        echo "‚úÖ Updated port configuration"
    else
        echo "‚ùå Project configuration not found"
        return 1
    fi
}

# Command line interface
case "${1:-}" in
    "create")
        create_project_config "$2" "$3" "$4" "$5" "$6" "$7" "$8"
        ;;
    "load")
        if load_project_config; then
            echo "‚úÖ Configuration loaded"
        else
            echo "‚ùå Failed to load configuration"
            exit 1
        fi
        ;;
    "detect")
        detect_project_config
        ;;
    "show")
        show_project_config
        ;;
    "check")
        if is_project_initialized; then
            echo "‚úÖ Project is initialized"
        else
            echo "‚ùå Project is not initialized"
            exit 1
        fi
        ;;
    "update-ports")
        update_ports "$2" "$3" "$4" "$5"
        ;;
    *)
        echo "Project Configuration Management"
        echo ""
        echo "Usage: $0 {create|load|detect|show|check|update-ports}"
        echo ""
        echo "Commands:"
        echo "  create <name> <namespace> <display> <pg_port> <redis_port> <smtp_web_port> <smtp_port>"
        echo "  load         - Load configuration into environment"
        echo "  detect       - Auto-detect configuration from existing files"
        echo "  show         - Display current configuration"
        echo "  check        - Check if project is initialized"
        echo "  update-ports <pg_port> <redis_port> <smtp_web_port> <smtp_port>"
        exit 1
        ;;
esac