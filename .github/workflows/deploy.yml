name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        echo "This would typically:"
        echo "  - Pull latest images from registry"
        echo "  - Update docker-compose configuration"
        echo "  - Run database migrations"
        echo "  - Deploy with rolling update strategy"
        echo "  - Run smoke tests"
        
        # Example deployment script (customize for your infrastructure)
        # ssh user@staging-server << 'EOF'
        # cd /app/intranet-starter
        # git pull origin main
        # docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
        # docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-deps api frontend
        # ./scripts/run-migrations.sh
        # ./scripts/smoke-tests.sh
        # EOF

    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment tests"
        # Add your staging environment tests here
        # curl -f https://staging.yourdomain.com/health
        # ./scripts/integration-tests.sh staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment: production
    needs: deploy-staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment artifact
      run: |
        tar -czf deployment.tar.gz \
          docker-compose.yml \
          docker-compose.prod.yml \
          .env.example \
          database/ \
          scripts/
        
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        echo "This would typically:"
        echo "  - Create backup of current deployment"
        echo "  - Pull latest tested images"
        echo "  - Run blue-green deployment"
        echo "  - Run database migrations with rollback plan"
        echo "  - Switch traffic to new deployment"
        echo "  - Run comprehensive health checks"
        
        # Example blue-green deployment
        # ssh user@production-server << 'EOF'
        # cd /app/intranet-starter
        # 
        # # Backup current state
        # ./scripts/backup.sh
        # 
        # # Deploy to green environment
        # docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
        # docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale api=0
        # docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale api=1
        # 
        # # Run health checks
        # ./scripts/health-check.sh green
        # 
        # # Switch traffic (update load balancer)
        # ./scripts/switch-traffic.sh green
        # 
        # # Scale down old deployment
        # ./scripts/cleanup-blue.sh
        # EOF

    - name: Run production health checks
      run: |
        echo "🏥 Running production health checks"
        # Add comprehensive production health checks
        # ./scripts/production-health-check.sh

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Production deployment successful"
        # Add notification logic (Slack, Teams, etc.)

    - name: Rollback on failure
      if: failure()
      run: |
        echo "❌ Production deployment failed - initiating rollback"
        # Add rollback logic
        # ssh user@production-server './scripts/rollback.sh'

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Deployment notification
      run: |
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "✅ Staging deployment successful"
        fi
        
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ Production deployment successful"
        fi
        
        if [[ "${{ needs.deploy-staging.result }}" == "failure" || "${{ needs.deploy-production.result }}" == "failure" ]]; then
          echo "❌ Deployment failed"
        fi
        
        # Here you would typically send notifications to:
        # - Slack/Teams channels
        # - Email notifications  
        # - Monitoring systems
        # - Issue tracking systems