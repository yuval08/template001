name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: .NET Dependency Scan
      run: |
        dotnet restore
        dotnet list package --vulnerable --include-transitive --format json > vulnerable-packages.json
        
        if jq -e '.projects[].frameworks[].vulnerabilities | length > 0' vulnerable-packages.json > /dev/null; then
          echo "❌ Vulnerable .NET packages found!"
          jq '.projects[].frameworks[].vulnerabilities' vulnerable-packages.json
          exit 1
        else
          echo "✅ No vulnerable .NET packages found"
        fi
      working-directory: ./backend

    - name: Node.js Dependency Scan
      run: |
        npm install
        npm audit --audit-level moderate --json > audit-results.json
        
        if jq -e '.metadata.vulnerabilities.total > 0' audit-results.json > /dev/null; then
          echo "❌ Vulnerable npm packages found!"
          npm audit --audit-level moderate
          exit 1
        else
          echo "✅ No vulnerable npm packages found"
        fi
      working-directory: ./frontend

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        load: true
        tags: intranet-backend:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image for scanning  
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        load: true
        tags: intranet-frontend:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy container scan - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'intranet-backend:scan'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy container scan - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'intranet-frontend:scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          backend-trivy-results.sarif
          frontend-trivy-results.sarif

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp, javascript

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build .NET application
      run: |
        dotnet restore
        dotnet build --configuration Release
      working-directory: ./backend

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker-bench-security:
    name: Docker Bench Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /var/lib:/var/lib \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /usr/lib/systemd:/usr/lib/systemd \
          -v /etc:/etc --label docker_bench_security \
          docker/docker-bench-security > docker-bench-results.txt 2>&1
          
        # Show results
        cat docker-bench-results.txt
        
        # Check for failures (customize threshold as needed)
        if grep -q "WARN\|FAIL" docker-bench-results.txt; then
          echo "⚠️ Docker security issues found"
          # Don't fail the build, just warn
        else
          echo "✅ Docker security checks passed"
        fi

    - name: Upload Docker Bench results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-bench-results
        path: docker-bench-results.txt

  security-report:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, sast-scan, secrets-scan, docker-bench-security]
    if: always()

    steps:
    - name: Generate Security Report
      run: |
        echo "# Security Scan Summary" >> security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Scan Results" >> security-report.md
        echo "| Scan Type | Status |" >> security-report.md
        echo "|-----------|--------|" >> security-report.md
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-report.md
        echo "| Container Scan | ${{ needs.container-scan.result }} |" >> security-report.md
        echo "| SAST Scan | ${{ needs.sast-scan.result }} |" >> security-report.md
        echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> security-report.md
        echo "| Docker Bench | ${{ needs.docker-bench-security.result }} |" >> security-report.md
        echo "" >> security-report.md
        
        if [[ "${{ needs.dependency-scan.result }}" == "failure" || \
              "${{ needs.container-scan.result }}" == "failure" || \
              "${{ needs.sast-scan.result }}" == "failure" || \
              "${{ needs.secrets-scan.result }}" == "failure" ]]; then
          echo "❌ Security vulnerabilities detected. Please review the scan results."
          echo "## Action Required" >> security-report.md
          echo "Critical security issues were found. Please review and address them." >> security-report.md
        else
          echo "✅ All security scans passed"
          echo "## Status: All Clear" >> security-report.md
          echo "No critical security issues detected." >> security-report.md
        fi

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.md